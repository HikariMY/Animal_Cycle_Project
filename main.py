import networkx as nx
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import messagebox

class EcosystemGraph:
    def __init__(self):
        self.G = nx.DiGraph()
        self.nodes = {}
        self.ecosystem_type = "Terrestrial"

    def set_ecosystem(self, eco_type):
        self.ecosystem_type = eco_type
        print(f"\nüîπ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®: {eco_type}")

    def add_species(self, name, category):
        self.G.add_node(name)
        self.nodes[name] = category
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {name} ‡πÄ‡∏õ‡πá‡∏ô {category}")

    def add_relationship(self, predator, prey):
        if predator in self.nodes and prey in self.nodes:
            self.G.add_edge(prey, predator)
            print(f"üîó {predator} ‡∏•‡πà‡∏≤ {prey}")
        else:
            print(f"‚ùóÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠ '{predator}' ‡∏´‡∏£‡∏∑‡∏≠ '{prey}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

    def auto_generate_relationship(self):
        print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")
        producers = [n for n in self.nodes if self.nodes[n] == "Producer"]
        herbivores = [n for n in self.nodes if self.nodes[n] == "Herbivore"]
        carnivores = [n for n in self.nodes if self.nodes[n] == "Carnivore"]

        for herb in herbivores:
            for prod in producers:
                if not self.G.has_edge(prod, herb):
                    self.G.add_edge(prod, herb)
                    print(f"üîó {herb} ‡∏•‡πà‡∏≤ {prod}")

        for carn in carnivores:
            for herb in herbivores:
                if not self.G.has_edge(herb, carn):
                    self.G.add_edge(herb, carn)
                    print(f"üîó {carn} ‡∏•‡πà‡∏≤ {herb}")

        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    def analyze_ecosystem(self):
        producers = [n for n in self.nodes if self.nodes[n] == "Producer"]
        herbivores = [n for n in self.nodes if self.nodes[n] == "Herbivore"]
        carnivores = [n for n in self.nodes if self.nodes[n] == "Carnivore"]
        decomposers = [n for n in self.nodes if self.nodes[n] == "Decomposer"]

        messages = []
        warning = False

        if len(herbivores) > len(carnivores) * 3:
            messages.append("‚ö†Ô∏è Herbivore ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ Producer ‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏î")
            warning = True
        if len(carnivores) < len(herbivores) / 2:
            messages.append("‚ö†Ô∏è Carnivore ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ Herbivore ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô")
            warning = True
        if len(carnivores) > len(herbivores):
            messages.append("‚ö†Ô∏è Carnivore ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ Herbivore ‡∏™‡∏π‡∏ç‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå")
            warning = True

        if not messages:
            messages.append("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡∏µ")

        # ===== Popup =====
        root = tk.Tk()
        root.withdraw()
        if warning:
            messagebox.showwarning("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö", "\n".join(messages))
        else:
            messagebox.showinfo("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö", "\n".join(messages))
        root.destroy()

        # ===== ‡∏ß‡∏≤‡∏î Network Graph =====
        pos = nx.spring_layout(self.G, seed=42, k=1.2, scale=3)
        color_map = {
            "Producer": "green",
            "Herbivore": "blue",
            "Carnivore": "red",
            "Decomposer": "brown"
        }
        node_colors = [color_map.get(self.nodes[n], "gray") for n in self.G.nodes]

        plt.figure(figsize=(10, 6))
        nx.draw(self.G, pos, with_labels=True, node_color=node_colors, edge_color="gray",
                node_size=2000, font_size=10, font_weight="bold", arrows=True)

        plt.title(f"üå± Network Graph - {self.ecosystem_type}")
        plt.axis('off')
        plt.tight_layout()
        plt.show()

        # ===== ‡∏ß‡∏≤‡∏î Bar Chart =====
        categories = ['Producer', 'Herbivore', 'Carnivore', 'Decomposer']
        counts = [len(producers), len(herbivores), len(carnivores), len(decomposers)]

        plt.figure(figsize=(7, 5))
        bars = plt.bar(categories, counts, color=["green", "blue", "red", "brown"])
        plt.title("Ecosystem structure")
        plt.ylabel("number of living things")

        for bar in bars:
            yval = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2, yval + 0.1, yval, ha='center', fontsize=10)

        plt.tight_layout()
        plt.show()

    def draw_graph(self):
        pos = nx.spring_layout(self.G, seed=42, k=1.2, scale=3)
        color_map = {
            "Producer": "green",
            "Herbivore": "blue",
            "Carnivore": "red",
            "Decomposer": "brown"
        }
        node_colors = [color_map.get(self.nodes[n], "gray") for n in self.G.nodes]

        plt.figure(figsize=(10, 6))
        nx.draw(self.G, pos, with_labels=True, node_color=node_colors, edge_color="gray",
                node_size=2000, font_size=10, font_weight="bold", arrows=True)
        plt.title(f"üåç The relationship structure of the ecosystem ({self.ecosystem_type})")
        plt.axis('off')
        plt.tight_layout()
        plt.show()


# ======= ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö =======
root = tk.Tk()
root.withdraw()
messagebox.showinfo(
    "üå± Ecosystem Simulation",
    "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®\n‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"
)
root.destroy()

# ======= ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å =======
eco = EcosystemGraph()

while True:
    print("\nüåç ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®")
    print("1Ô∏è‚É£ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏® (‡∏ö‡∏Å[Terrestrial] / ‡∏ô‡πâ‡∏≥[Aquatic])")
    print("2Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï")
    print("3Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    print("4Ô∏è‚É£ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®")
    print("5Ô∏è‚É£ ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå")
    print("0Ô∏è‚É£ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π: ")

    if choice == "1":
        while True:
            t = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (Terrestrial / Aquatic): ").capitalize()
            if t in ["Terrestrial", "Aquatic"]:
                eco.set_ecosystem(t)
                break
            else:
                print("‚ùóÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Terrestrial ‡∏´‡∏£‡∏∑‡∏≠ Aquatic ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

    elif choice == "2":
        name = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: ")

        valid_categories = ["Producer", "Herbivore", "Carnivore", "Decomposer"]
        while True:
            print("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏ú‡∏π‡πâ‡∏ú‡∏•‡∏¥‡∏ï[Producer] / ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡∏ä[Herbivore] / ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Å‡∏¥‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠[Carnivore] / ‡∏ú‡∏π‡πâ‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏∞‡∏•‡∏≤‡∏¢[Decomposer]")
            cat = input("‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ").capitalize()
            if cat in valid_categories:
                break
            else:
                print("‚ùóÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Producer / Herbivore / Carnivore / Decomposer ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

        eco.add_species(name, cat)

    elif choice == "3":
        if not eco.nodes:
            print("‚ùóÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô")
            continue
        eco.auto_generate_relationship()

    elif choice == "4":
        eco.analyze_ecosystem()

    elif choice == "5":
        eco.draw_graph()

    elif choice == "0":
        print("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
        break

    else:
        print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
